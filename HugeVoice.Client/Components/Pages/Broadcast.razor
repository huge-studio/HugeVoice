@page "/broadcast"
@using Microsoft.JSInterop
@using QRCoder
@using HugeVoice.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AnimalNameGenerator AnimalNameGenerator
@implements IAsyncDisposable

<PageTitle>Broadcast - HugeVox</PageTitle>

<div class="row justify-content-center">
    <div class="col-12 col-lg-10 col-xl-8">
        <div class="card shadow-sm border-0">
            <div class="card-header bg-success text-white py-3">
                <h3 class="mb-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-mic-fill me-2 mb-1" viewBox="0 0 16 16">
                        <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z"/>
                        <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z"/>
                    </svg>
                    Audio Broadcaster
                </h3>
            </div>
            <div class="card-body p-4">
                <div class="row">
                    <div class="col-12 col-md-6 text-center mb-4 mb-md-0">
                        <h5 class="mb-3">Share this QR Code</h5>
                        @if (!string.IsNullOrEmpty(_qrCodeDataUrl))
                        {
                            <div class="qr-code-container mb-3" style="cursor: pointer;" @onclick="ShowQRCodePopup">
                                <img src="@_qrCodeDataUrl" alt="QR Code" class="img-fluid rounded shadow-sm" style="max-width: 250px;" />
                                <div class="mt-2">
                                    <small class="text-muted">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-fullscreen me-1" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707zm4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707zm0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707zm-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707z"/>
                                        </svg>
                                        Tap to view full size
                                    </small>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="spinner-border text-success mb-3" role="status">
                                <span class="visually-hidden">Generating QR Code...</span>
                            </div>
                        }
                        <div class="alert alert-info">
                            <small>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle me-1" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                </svg>
                                Listeners can scan this to join
                            </small>
                        </div>
                    </div>
                    
                    <div class="col-12 col-md-6">
                        <h5 class="mb-3">Channel Setup</h5>
                        
                        <div class="mb-3">
                            <label class="form-label">Channel ID</label>
                            <div class="input-group">
                                <InputText @bind-Value="_channelId" @oninput="OnChannelIdChanged" 
                                           class="form-control font-monospace fw-bold" 
                                           placeholder="Enter channel ID"
                                           disabled ="@_isRecording"
                                           />
                                <button class="btn btn-outline-secondary" type="button" @onclick="GenerateNewChannelId" 
                                        disabled="@_isRecording" title="Generate new channel ID">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                                    </svg>
                                </button>
                                <button class="btn btn-outline-secondary" type="button" onclick="navigator.clipboard.writeText('@_channelId')">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                                        <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                                        <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                                    </svg>
                                </button>
                            </div>
                            <small class="text-muted">
                                @if (_isRecording)
                                {
                                    <text>Channel ID cannot be changed while broadcasting</text>
                                }
                                else
                                {
                                    <text>Enter a custom channel ID or generate a random one. Share this ID with your listeners.</text>
                                }
                            </small>
                        </div>

                        <!-- Channel Status Display -->
                        @if (!string.IsNullOrEmpty(_channelId))
                        {
                            <div class="mb-3">
                                <label class="form-label text-muted small">Channel Status</label>
                                <div class="card border-0 @(_channelHasBroadcaster && !_isBroadcaster ? "border-warning bg-warning-subtle" : "border-success bg-success-subtle")">
                                    <div class="card-body py-2 px-3">
                                        @if (_isBroadcaster)
                                        {
                                            <div class="d-flex align-items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-broadcast text-success me-2" viewBox="0 0 16 16">
                                                    <path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM8 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/>
                                                </svg>
                                                <small class="text-success fw-bold">? You are the broadcaster</small>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex align-items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success me-2" viewBox="0 0 16 16">
                                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                                    <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                                </svg>
                                                <small class="text-success fw-bold">? Channel ready for broadcasting</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mb-4">
                            <label class="form-label text-muted small">Listener URL</label>
                            <div class="input-group">
                                <input type="text" class="form-control font-monospace small" value="@_listenerUrl" readonly />
                                <button class="btn btn-outline-secondary" type="button" onclick="navigator.clipboard.writeText('@_listenerUrl')">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                                        <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                                        <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            @if (!_isRecording && !_isBroadcaster)
                            {
                                <div class="alert alert-success">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle me-2" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                    </svg>
                                    <strong>Channel Ready:</strong> Ready to broadcast on <strong>@_channelId</strong>
                                </div>
                                
                                <button @onclick="StartRecording" class="btn btn-success btn-lg">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-play-circle me-2" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z"/>
                                    </svg>
                                    Start Broadcasting
                                </button>
                            }
                            else if (_isRecording)
                            {
                                <button @onclick="StopRecording" class="btn btn-danger btn-lg">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-stop-circle me-2" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="M5 6.5A1.5 1.5 0 0 1 6.5 5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3z"/>
                                    </svg>
                                    Stop Broadcasting
                                </button>
                                <div class="alert alert-success d-flex align-items-center mb-0" role="alert">
                                    <div class="spinner-grow spinner-grow-sm text-success me-2" role="status">
                                        <span class="visually-hidden">Broadcasting...</span>
                                    </div>
                                    <div>
                                        <strong>? Live Broadcasting</strong><br />
                                        <small>Your audio is being streamed on channel: <strong>@_channelId</strong></small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="alert alert-warning mt-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle me-2" viewBox="0 0 16 16">
                <path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.60.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"/>
            <path d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z"/>
            </svg>
            <strong>Important:</strong> Your browser will request microphone permission. Please allow access to start broadcasting.
            <br />
            <strong>Single Broadcaster Rule:</strong> Only one broadcaster is allowed per channel at a time. The system will prevent multiple broadcasters and show validation errors if you try to broadcast on an occupied channel.
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger mt-3">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle me-2" viewBox="0 0 16 16">
                    <path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.60.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"/>
            <path d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z"/>
            </svg>
            <strong>Error:</strong> @_errorMessage
            </div>
        }
    </div>
</div>

<!-- QR Code Full-Screen Popup -->
@if (_showQRPopup)
{
    <div class="qr-popup-overlay" @onclick="HideQRCodePopup" @onclick:stopPropagation="false">
        <div class="qr-popup-content">
            <div class="text-center">
                <h4 class="text-white mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-qr-code me-2" viewBox="0 0 16 16">
                        <path d="M2 2h2v2H2V2Z"/>
                        <path d="M6 0v6H0V0h6ZM5 1H1v4h4V1ZM4 12H2v2h2v-2Z"/>
                        <path d="M6 10v6H0v-6h6Zm-1 1H1v4h4v-4ZM12 2h2v2h-2V2Z"/>
                        <path d="M16 0v6h-6V0h6Zm-1 1h-4v4h4V1Zm-3 11v-1h1v1h-1Zm0 1h1v1h-1v-1Z"/>
                        <path d="M16 10v1h-1v-1h1Zm-1 0v1h-1v-1h1Zm-1 1v1h-1v-1h1Zm-1-1V9h1v1h-1ZM8 9v1H7V9h1Zm0 1v1H7v-1h1Zm1 0h1v1H9v-1Zm1-1V8h1v1h-1Zm0-1V7h1v1h-1Zm-2 0V7h1v1H8Zm2-1V6h1v1h-1Zm-1-1V5h1v1H9Zm-2 1v1H6V6h1Zm1-1V4h1v1H8Zm1-1V3h1v1H9Zm-2 0V3h1v1H7ZM8 1V0h1v1H8Z"/>
                    </svg>
                    Scan to Join Channel
                </h4>
                @if (!string.IsNullOrEmpty(_qrCodeDataUrl))
                {
                    <img src="@_qrCodeDataUrl" alt="QR Code" class="qr-popup-image" />
                }
                <p class="text-white-50 mt-4 mb-4">
                    Channel: <strong class="text-white">@_channelId</strong><br />
                    <small>Tap anywhere to close</small>
                </p>
            </div>
        </div>
    </div>
}

@code {
    private string _channelId = "";
    private string _listenerUrl = "";
    private string _qrCodeDataUrl = "";
    private bool _isRecording = false;
    private bool _isBroadcaster = false;
    private bool _channelHasBroadcaster = false;
    private bool _showQRPopup = false;
    private IJSObjectReference? _jsModule;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Generate initial random channel ID
        _channelId = AnimalNameGenerator.GenerateChannelName();
        UpdateUrls();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Loading audio.js module...");
                _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./audio.js");
                Console.WriteLine("Audio.js module loaded successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading audio module: {ex}");
                _errorMessage = $"Failed to load audio module: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task ConnectToHub()
    {
        try
        {
            _errorMessage = "";
            Console.WriteLine($"Channel {_channelId} is ready for broadcasting");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ConnectToHub: {ex.Message}");
            _errorMessage = $"Failed to setup channel: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task DisconnectFromHub()
    {
        try
        {
            _isBroadcaster = false;
            _channelHasBroadcaster = false;
            _errorMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to disconnect: {ex.Message}";
            StateHasChanged();
        }
    }

    private void GenerateNewChannelId()
    {
        _channelId = AnimalNameGenerator.GenerateChannelName();
        UpdateUrls();
        
        // Rejoin room if connected but not recording
        if (_channelHasBroadcaster && !_isRecording)
        {
            _ = Task.Run(async () =>
            {
                try
                {
                    // Logic to rejoin the room with new Channel ID if necessary
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error rejoining room with new ID: {ex.Message}");
                }
            });
        }
    }

    private async Task OnChannelIdChanged(ChangeEventArgs e)
    {
        var newChannelId = e.Value?.ToString() ?? "";
        if (_channelId != newChannelId)
        {
            _channelId = newChannelId;
            UpdateUrls();
            
            // Rejoin room if connected but not recording
            if (_channelHasBroadcaster && !_isRecording && !string.IsNullOrWhiteSpace(_channelId))
            {
                try
                {
                    // Logic to rejoin the room with new Channel ID if necessary
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error rejoining room with new ID: {ex.Message}");
                }
            }
        }
    }

    private void UpdateUrls()
    {
        _listenerUrl = $"{Navigation.BaseUri}listen/{_channelId}";
        GenerateQRCode();
        StateHasChanged();
    }

    private void GenerateQRCode()
    {
        if (!string.IsNullOrEmpty(_listenerUrl))
        {
            using var qrGenerator = new QRCodeGenerator();
            using var qrCodeData = qrGenerator.CreateQrCode(_listenerUrl, QRCodeGenerator.ECCLevel.Q);
            using var qrCode = new PngByteQRCode(qrCodeData);
            var qrCodeBytes = qrCode.GetGraphic(20);
            _qrCodeDataUrl = $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
        }
    }

    private async Task StartRecording()
    {
        try
        {
            _errorMessage = "";
            
            // Check if we're already a broadcaster
            if (_isBroadcaster)
            {
                _errorMessage = "You are already broadcasting on this channel.";
                StateHasChanged();
                return;
            }
            
            // JavaScript will handle ALL hub connection, broadcaster role, and audio transmission
            _isBroadcaster = true;
            _channelHasBroadcaster = true;
            _isRecording = true;
            Console.WriteLine($"Starting JavaScript recording for channel: {_channelId}");
            StateHasChanged();
            
            // Start recording using JavaScript with SignalR managed in JS
            // JavaScript will join room and request broadcaster role with its own connection
            if (_jsModule != null)
            {
                var hubUrl = Navigation.ToAbsoluteUri("/audiohub").ToString();
                Console.WriteLine($"Starting JavaScript recording with hub URL: {hubUrl}");
                await _jsModule.InvokeVoidAsync("startRecording", _channelId, hubUrl);
                Console.WriteLine("JavaScript recording started successfully");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in StartRecording: {ex.Message}");
            _errorMessage = $"Failed to start recording: {ex.Message}";
            _isBroadcaster = false;
            _isRecording = false;
            
            StateHasChanged();
        }
    }

    private async Task StopRecording()
    {
        try
        {
            _isRecording = false;
            StateHasChanged();
            
            // Stop recording in JavaScript (will also release broadcaster role through JS hub)
            if (_jsModule != null)
            {
                await _jsModule.InvokeVoidAsync("stopRecording");
            }
            
            _isBroadcaster = false;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to stop recording: {ex.Message}";
            StateHasChanged();
        }
    }

    private void ShowQRCodePopup()
    {
        _showQRPopup = true;
        StateHasChanged();
    }

    private void HideQRCodePopup()
    {
        _showQRPopup = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            // JavaScript will handle cleaning up hub connection and releasing broadcaster role
            try
            {
                await _jsModule.InvokeVoidAsync("cleanup");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during cleanup: {ex.Message}");
            }
            
            await _jsModule.DisposeAsync();
        }
    }
}