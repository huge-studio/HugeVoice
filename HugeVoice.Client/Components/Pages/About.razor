@page "/about"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>About - HugeVoice</PageTitle>

<div class="row justify-content-center">
    <div class="col-12 col-lg-10 col-xl-8">
        <div class="card shadow-sm border-0">
            <div class="card-header bg-primary text-white py-3">
                <h3 class="mb-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-info-circle me-2 mb-1" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                    </svg>
                    About HugeVoice
                </h3>
            </div>
            <div class="card-body p-4">
                <div class="row">
                    <div class="col-12 col-md-8">
                        <h4 class="mb-3">Real-time Audio Broadcasting</h4>
                        <p class="lead">
                            HugeVoice is a web-based real-time audio broadcasting platform that allows you to create named channels 
                            and stream audio to multiple listeners simultaneously.
                        </p>
                        
                        <h5 class="mt-4 mb-3">Key Features</h5>
                        <ul class="list-unstyled">
                            <li class="mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success me-2" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                </svg>
                                <strong>Fun Channel Names:</strong> Auto-generated names like "Happy-Panda" and "Brave-Bear"
                            </li>
                            <li class="mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success me-2" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                </svg>
                                <strong>QR Code Sharing:</strong> Easily share channels with QR codes
                            </li>
                            <li class="mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success me-2" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                </svg>
                                <strong>Single Broadcaster:</strong> Only one broadcaster per channel prevents conflicts
                            </li>
                            <li class="mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success me-2" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                </svg>
                                <strong>Channel Persistence:</strong> Channels stay open when broadcasters leave
                            </li>
                            <li class="mb-2">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle text-success me-2" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                </svg>
                                <strong>Cross-Platform:</strong> Works on desktop, mobile, and tablets
                            </li>
                        </ul>

                        <h5 class="mt-4 mb-3">Technology Stack</h5>
                        <p>
                            HugeVoice is built with <strong>.NET 9</strong>, <strong>Blazor WebAssembly</strong>, and <strong>SignalR</strong> 
                            for real-time communication. Audio processing uses the <strong>Web Audio API</strong> with special optimizations 
                            for Safari and iOS devices.
                        </p>
                    </div>
                    
                    <div class="col-12 col-md-4">
                        <div class="card bg-light border-0">
                            <div class="card-header bg-info text-white">
                                <h6 class="mb-0">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-speaker me-2" viewBox="0 0 16 16">
                                        <path d="M9 4a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-2.5 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                                        <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm6 4a2 2 0 1 1-4 0 2 2 0 0 1 4 0zM8 7a3.5 3.5 0 1 1 0 7 3.5 3.5 0 0 1 0-7z"/>
                                    </svg>
                                    Audio Test
                                </h6>
                            </div>
                            <div class="card-body">
                                <p class="small text-muted mb-3">
                                    Test your browser's audio capabilities, especially useful for Safari and iOS users.
                                </p>
                                
                                @if (!_audioTested)
                                {
                                    <button @onclick="TestAudio" class="btn btn-info btn-sm w-100 mb-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-circle me-1" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                            <path d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445z"/>
                                        </svg>
                                        Test Audio Playback
                                    </button>
                                }
                                else
                                {
                                    <div class="alert alert-success alert-sm p-2 mb-2">
                                        <small>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-check-circle me-1" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                                <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                            </svg>
                                            Audio test completed!
                                        </small>
                                    </div>
                                    <button @onclick="TestAudio" class="btn btn-outline-info btn-sm w-100 mb-2">
                                        Test Again
                                    </button>
                                }
                                
                                <div class="mt-2">
                                    <small class="text-muted">
                                        <strong>Browser:</strong> @_browserInfo<br/>
                                        <strong>Audio Context:</strong> @_audioContextInfo
                                    </small>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(_audioTestError))
                                {
                                    <div class="alert alert-warning alert-sm p-2 mt-2">
                                        <small>
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-exclamation-triangle me-1" viewBox="0 0 16 16">
                                                <path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.60.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"/>
                                            </svg>
                                            @_audioTestError
                                        </small>
                                    </div>
                                }
                            </div>
                        </div>

                        @if (_browserInfo.Contains("Safari") || _browserInfo.Contains("iPhone") || _browserInfo.Contains("iPad"))
                        {
                            <div class="card bg-warning-subtle border-warning mt-3">
                                <div class="card-header bg-warning text-dark">
                                    <h6 class="mb-0">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-phone me-2" viewBox="0 0 16 16">
                                            <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"/>
                                            <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                                        </svg>
                                        Safari/iOS Tips
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <ul class="small mb-0">
                                        <li>Always tap "Enable Audio Playback" when listening</li>
                                        <li>Make sure your device is not in silent mode</li>
                                        <li>Check that volume is turned up</li>
                                        <li>Try using headphones for better audio quality</li>
                                        <li>If audio doesn't work, try refreshing the page</li>
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference? _jsModule;
    private bool _audioTested = false;
    private string _browserInfo = "";
    private string _audioContextInfo = "Not tested";
    private string _audioTestError = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./audio.js");
                _browserInfo = await JS.InvokeAsync<string>("eval", "navigator.userAgent");
                
                // Extract browser name for display
                if (_browserInfo.Contains("Chrome") && !_browserInfo.Contains("Edge"))
                    _browserInfo = "Chrome";
                else if (_browserInfo.Contains("Firefox"))
                    _browserInfo = "Firefox";
                else if (_browserInfo.Contains("Safari") && !_browserInfo.Contains("Chrome"))
                    _browserInfo = _browserInfo.Contains("iPhone") || _browserInfo.Contains("iPad") ? "iOS Safari" : "Safari";
                else if (_browserInfo.Contains("Edge"))
                    _browserInfo = "Edge";
                else
                    _browserInfo = "Unknown";
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _audioTestError = $"Failed to load audio module: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task TestAudio()
    {
        try
        {
            _audioTestError = "";
            
            if (_jsModule != null)
            {
                // Activate audio context first
                var activated = await _jsModule.InvokeAsync<bool>("activateAudioContext");
                
                if (activated)
                {
                    _audioContextInfo = "Activated successfully";
                    
                    // Create a simple test tone (440Hz A note for 0.5 seconds)
                    var testAudioData = GenerateTestTone(440, 0.5, 16000);
                    var base64Audio = Convert.ToBase64String(testAudioData);
                    
                    await _jsModule.InvokeVoidAsync("playAudio", base64Audio);
                    
                    _audioTested = true;
                    _audioTestError = "";
                }
                else
                {
                    _audioContextInfo = "Failed to activate";
                    _audioTestError = "Could not activate audio context. User interaction required.";
                }
            }
            else
            {
                _audioTestError = "Audio module not loaded";
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _audioTestError = $"Audio test failed: {ex.Message}";
            _audioContextInfo = "Error";
            StateHasChanged();
        }
    }

    private byte[] GenerateTestTone(double frequency, double duration, int sampleRate)
    {
        int sampleCount = (int)(duration * sampleRate);
        var samples = new short[sampleCount];
        
        for (int i = 0; i < sampleCount; i++)
        {
            double time = (double)i / sampleRate;
            double amplitude = Math.Sin(2 * Math.PI * frequency * time);
            
            // Apply envelope to avoid clicks
            double envelope = 1.0;
            if (i < sampleRate * 0.05) // 50ms fade in
                envelope = (double)i / (sampleRate * 0.05);
            else if (i > sampleCount - sampleRate * 0.05) // 50ms fade out
                envelope = (double)(sampleCount - i) / (sampleRate * 0.05);
            
            samples[i] = (short)(amplitude * envelope * 0.3 * short.MaxValue); // 30% volume
        }
        
        var bytes = new byte[samples.Length * 2];
        Buffer.BlockCopy(samples, 0, bytes, 0, bytes.Length);
        return bytes;
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            await _jsModule.DisposeAsync();
        }
    }
}