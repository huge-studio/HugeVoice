@page "/listen/{RoomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using QRCoder  
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IAsyncDisposable

<PageTitle>Listen - HugeVox</PageTitle>

<div class="row justify-content-center">
    <div class="col-12 col-lg-10 col-xl-8">
        <div class="card shadow-sm border-0">
            <div class="card-header bg-primary text-white py-3">
                <h3 class="mb-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-headphones me-2 mb-1" viewBox="0 0 16 16">
                        <path d="M8 3a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V8a6 6 0 1 1 12 0v5a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h1V8a5 5 0 0 0-5-5z"/>
                    </svg>
                    Audio Listener
                </h3>
            </div>
            <div class="card-body p-4">
                @if (_isConnected)
                {
                    <div class="row">
                        <div class="col-12 col-md-6 text-center mb-4 mb-md-0">
                            <h5 class="mb-3">Share with Others</h5>
                            @if (!string.IsNullOrEmpty(_qrCodeDataUrl))
                            {
                                <div class="qr-code-container mb-3">
                                    <img src="@_qrCodeDataUrl" alt="QR Code" class="img-fluid rounded shadow-sm" style="max-width: 250px;" />
                                </div>
                            }
                            else
                            {
                                <div class="spinner-border text-primary mb-3" role="status">
                                    <span class="visually-hidden">Generating QR Code...</span>
                                </div>
                            }
                            <div class="alert alert-info">
                                <small>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle me-1" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                    </svg>
                                    Share this QR code with others
                                </small>
                            </div>
                        </div>
                        
                        <div class="col-12 col-md-6">
                            <h5 class="mb-3">Connection Status</h5>
                            
                            <div class="mb-3">
                                @if (_hasBroadcaster && !_waitingForBroadcaster)
                                {
                                    <div class="d-flex align-items-center justify-content-center mb-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-broadcast text-success" viewBox="0 0 16 16">
                                            <path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM8 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/>
                                        </svg>
                                    </div>
                                    
                                    <div class="alert alert-success d-flex align-items-center justify-content-center mb-3" role="alert">
                                        <div class="spinner-grow spinner-grow-sm text-success me-2" role="status">
                                            <span class="visually-hidden">Listening...</span>
                                        </div>
                                        <div>
                                            <strong>● Live Audio</strong>
                                        </div>
                                    </div>
                                }
                                else if (_waitingForBroadcaster)
                                {
                                    <div class="d-flex align-items-center justify-content-center mb-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-hourglass-split text-warning" viewBox="0 0 16 16">
                                            <path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.35z"/>
                                        </svg>
                                    </div>
                                    
                                    <div class="alert alert-warning d-flex align-items-center justify-content-center mb-3" role="alert">
                                        <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
                                            <span class="visually-hidden">Waiting...</span>
                                        </div>
                                        <div>
                                            <strong>⏳ Waiting for Broadcaster</strong>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center justify-content-center mb-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-broadcast text-success" viewBox="0 0 16 16">
                                            <path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM8 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/>
                                        </svg>
                                    </div>
                                    
                                    <div class="alert alert-success d-flex align-items-center justify-content-center mb-3" role="alert">
                                        <div class="spinner-grow spinner-grow-sm text-success me-2" role="status">
                                            <span class="visually-hidden">Connected...</span>
                                        </div>
                                        <div>
                                            <strong>● Connected</strong>
                                        </div>
                                    </div>
                                }

                                <!-- Audio activation button -->
                                @if (!_audioActivated)
                                {
                                    <div class="text-center mb-3">
                                        <div class="alert alert-warning">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-volume-mute me-2" viewBox="0 0 16 16">
                                                <path d="M6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89A.5.5 0 0 1 6.717 3.55zM6 5.04 4.312 6.39A.5.5 0 0 1 4 6.5H2v3h2a.5.5 0 0 1 .312.11L6 10.96V5.04zm7.854.606a.5.5 0 0 1 0 .708L12.207 8l1.647 1.646a.5.5 0 0 1-.708.708L11.5 8.707l-1.646 1.647a.5.5 0 0 1-.708-.708L10.793 8 9.146 6.354a.5.5 0 1 1 .708-.708L11.5 7.293l1.646-1.647a.5.5 0 0 1 .708 0z"/>
                                            </svg>
                                            <strong>Audio Activation Required</strong><br/>
                                            <small>@(_userAgent.Contains("Safari") || _userAgent.Contains("iPhone") || _userAgent.Contains("iPad") ? 
                                                "Safari/iOS requires user interaction to enable audio playback." : 
                                                "Your browser requires user interaction to enable audio playback.")</small>
                                        </div>
                                        <button @onclick="ActivateAudio" class="btn btn-primary btn-lg">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-volume-up me-2" viewBox="0 0 16 16">
                                                <path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"/>
                                                <path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"/>
                                                <path d="M10.025 8a4.486 4.486 0 0 1-1.318 3.182L8 10.475A3.489 3.489 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.486 4.486 0 0 1 10.025 8zM7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12V4zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11z"/>
                                            </svg>
                                            🎵 Enable Audio Playback
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center mb-3">
                                        <div class="alert alert-success">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle me-2" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                                <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                            </svg>
                                            <strong>✓ Audio Ready!</strong>
                                            <small class="d-block">You can now hear audio when broadcasting starts.</small>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label text-muted small">Room ID</label>
                                <div class="input-group">
                                    <input type="text" class="form-control font-monospace" value="@RoomId" readonly />
                                    <button class="btn btn-outline-secondary" type="button" onclick="navigator.clipboard.writeText('@RoomId')">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                                            <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                                            <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <label class="form-label text-muted small">Listener URL</label>
                                <div class="input-group">
                                    <input type="text" class="form-control font-monospace small" value="@_listenerUrl" readonly />
                                    <button class="btn btn-outline-secondary" type="button" onclick="navigator.clipboard.writeText('@_listenerUrl')">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                                            <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                                            <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>

                            @if (_hasBroadcaster && !_waitingForBroadcaster)
                            {
                                <div class="alert alert-success mb-0">
                                    <div class="d-flex align-items-start">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-volume-up me-2 flex-shrink-0" viewBox="0 0 16 16">
                                            <path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"/>
                                            <path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"/>
                                            <path d="M10.025 8a4.486 4.486 0 0 1-1.318 3.182L8 10.475A3.489 3.489 0 0 0 9.025 8c0-.966-.392-1.841-1.025-2.475l.707-.707A4.486 4.486 0 0 1 10.025 8zM7 4a.5.5 0 0 0-.812-.39L3.825 5.5H1.5A.5.5 0 0 0 1 6v4a.5.5 0 0 0 .5.5h2.325l2.363 1.89A.5.5 0 0 0 7 12V4zM4.312 6.39 6 5.04v5.92L4.312 9.61A.5.5 0 0 0 4 9.5H2v-3h2a.5.5 0 0 0 .312-.11z"/>
                                        </svg>
                                        <div>
                                            <strong>Listening for audio...</strong><br />
                                            <small>Volume up for best experience</small>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (_waitingForBroadcaster)
                            {
                                <div class="alert alert-warning mb-0">
                                    <div class="d-flex align-items-start">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-clock me-2 flex-shrink-0" viewBox="0 0 16 16">
                                            <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                            <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                                        </svg>
                                        <div>
                                            <strong>Waiting for broadcaster...</strong><br />
                                            <small>Channel is open, but no one is broadcasting yet. Stay connected!</small>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info mb-0">
                                    <div class="d-flex align-items-start">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-info-circle me-2 flex-shrink-0" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                            <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                        </svg>
                                        <div>
                                            <strong>Connected to channel</strong><br />
                                            <small>Ready to receive audio when broadcasting starts</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <div class="mb-4">
                            <div class="spinner-border text-primary" style="width: 4rem; height: 4rem;" role="status">
                                <span class="visually-hidden">Connecting...</span>
                            </div>
                        </div>
                        
                        <h5 class="mb-3">Connecting to broadcast...</h5>
                        <p class="text-muted">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-router me-1" viewBox="0 0 16 16">
                                <path d="M5.525 3.025a3.5 3.5 0 0 1 4.95 0 .5.5 0 1 0 .707-.707 4.5 4.5 0 0 0-6.364 0 .5.5 0 0 0 .707.707Z"/>
                                <path d="M6.94 4.44a1.5 1.5 0 0 1 2.12 0 .5.5 0 0 0 .708-.708 2.5 2.5 0 0 0-3.536 0 .5.5 0 0 0 .707.707ZM2.974 2.342a.5.5 0 1 0-.948.316L3.806 8H1.5A1.5 1.5 0 0 0 0 9.5v2A1.5 1.5 0 0 0 1.5 13H2a.5.5 0 0 0 .5.5h2A.5.5 0 0 0 5 13h6a.5.5 0 0 0 .5.5h2a.5.5 0 0 0 .5-.5h.5a1.5 1.5 0 0 0 1.5-1.5v-2A1.5 1.5 0 0 0 14.5 8h-2.306l1.78-5.342a.5.5 0 1 0-.948-.316L11.14 8H4.86L2.974 2.342ZM14.5 9a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5h13Z"/>
                                <path d="M8.5 11.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm2 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"/>
                            </svg>
                            Establishing connection to room <strong class="font-monospace">@RoomId</strong>
                        </p>
                        
                        <div class="progress mt-3" style="height: 4px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger mt-3">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle me-2" viewBox="0 0 16 16">
                    <path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"/>
            </svg>
            <strong>Error:</strong> @_errorMessage
            </div>
        }

        <div class="alert alert-info mt-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle me-2" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
            </svg>
            <strong>Audio Tips:</strong> 
            @if (_waitingForBroadcaster)
            {
                <text>The channel stays open even when the broadcaster leaves - you can wait for them to return or for someone else to start broadcasting! </text>
            }
            else
            {
                <text>Share the QR code to invite others! </text>
            }
            @if (_userAgent.Contains("Safari") || _userAgent.Contains("iPhone") || _userAgent.Contains("iPad"))
            {
                <text><strong>Safari/iOS users:</strong> Make sure to tap "Enable Audio Playback" above to hear audio. </text>
            }
            <text>For best experience, turn up your volume and use headphones if available.</text>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string RoomId { get; set; } = "";

    private HubConnection? _hubConnection;
    private bool _isConnected = false;
    private bool _hasBroadcaster = false;
    private bool _waitingForBroadcaster = false;
    private IJSObjectReference? _jsModule;
    private string _listenerUrl = "";
    private string _qrCodeDataUrl = "";
    private string _errorMessage = "";
    private bool _audioActivated = false;
    private string _userAgent = "";

    protected override async Task OnInitializedAsync()
    {
        _listenerUrl = $"{Navigation.BaseUri}listen/{RoomId}";
        GenerateQRCode();

        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/audiohub"))
                .Build();

            // Handle incoming audio
            _hubConnection.On<byte[]>("ReceiveAudioChunk", async (audioData) =>
            {
                try
                {
                    if (_jsModule != null && audioData != null && audioData.Length > 0)
                    {
                        var base64Audio = Convert.ToBase64String(audioData);
                        await _jsModule.InvokeVoidAsync("playAudio", base64Audio);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error playing audio: {ex.Message}");
                }
            });

            // Handle room status updates
            _hubConnection.On<string, bool>("RoomStatus", (roomId, hasBroadcaster) =>
            {
                if (roomId == RoomId)
                {
                    _hasBroadcaster = hasBroadcaster;
                    _waitingForBroadcaster = !hasBroadcaster;
                    InvokeAsync(StateHasChanged);
                }
            });

            // Handle broadcaster joining
            _hubConnection.On<string, string>("BroadcasterJoined", (roomId, connectionId) =>
            {
                if (roomId == RoomId)
                {
                    _hasBroadcaster = true;
                    _waitingForBroadcaster = false;
                    InvokeAsync(StateHasChanged);
                }
            });

            // Handle broadcaster leaving
            _hubConnection.On<string, string>("BroadcasterLeft", (roomId, connectionId) =>
            {
                if (roomId == RoomId)
                {
                    _hasBroadcaster = false;
                    // Don't immediately set waiting - let the WaitingForBroadcaster message handle it
                    InvokeAsync(StateHasChanged);
                }
            });

            // Handle waiting for broadcaster status
            _hubConnection.On<string>("WaitingForBroadcaster", (roomId) =>
            {
                if (roomId == RoomId)
                {
                    _waitingForBroadcaster = true;
                    _hasBroadcaster = false;
                    InvokeAsync(StateHasChanged);
                }
            });

            // Handle broadcaster becoming available
            _hubConnection.On<string>("BroadcasterAvailable", (roomId) =>
            {
                if (roomId == RoomId)
                {
                    _hasBroadcaster = true;
                    _waitingForBroadcaster = false;
                    InvokeAsync(StateHasChanged);
                }
            });

            await _hubConnection.StartAsync();
            await _hubConnection.InvokeAsync("JoinRoom", RoomId, false); // false = listener, not broadcaster
            
            _isConnected = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to connect to audio stream: {ex.Message}";
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./audio.js");
                
                // Get user agent for Safari/iOS detection
                _userAgent = await JS.InvokeAsync<string>("eval", "navigator.userAgent");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _errorMessage = $"Failed to load audio module: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task ActivateAudio()
    {
        try
        {
            if (_jsModule != null)
            {
                Console.WriteLine("Activating audio with user interaction...");
                var success = await _jsModule.InvokeAsync<bool>("activateAudioContext");
                if (success)
                {
                    _audioActivated = true;
                    Console.WriteLine("Audio activation successful");
                }
                else
                {
                    _errorMessage = "Failed to activate audio. Please try again.";
                    Console.WriteLine("Audio activation failed");
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to activate audio: {ex.Message}";
            Console.WriteLine($"Audio activation error: {ex.Message}");
            StateHasChanged();
        }
    }

    private void GenerateQRCode()
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(_listenerUrl, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);
        _qrCodeDataUrl = $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
        if (_jsModule != null)
        {
            await _jsModule.DisposeAsync();
        }
    }
}
