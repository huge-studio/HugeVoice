// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HugeVoice.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AudioListeningFeature : object, Xunit.IClassFixture<AudioListeningFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Audio Listening", "As a user\r\nI want to listen to audio broadcasts from a specific channel\r\nSo that " +
                "I can hear real-time audio streams from broadcasters", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AudioListening.feature"
#line hidden
        
        public AudioListeningFeature(AudioListeningFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("the HugeVoice application is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("the SignalR hub is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Connect to a channel and listen to audio")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Connect to a channel and listen to audio")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "happy-path")]
        public async System.Threading.Tasks.Task ConnectToAChannelAndListenToAudio()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "happy-path"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Connect to a channel and listen to audio", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.GivenAsync("there is an active broadcaster on channel \"Happy-Panda\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.WhenAsync("I navigate to the listen page for channel \"Happy-Panda\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("I should connect to the SignalR hub", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("I should join the \"Happy-Panda\" room", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("I should see \"Connected\" status with spinning indicator", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I should be ready to receive audio chunks", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access channel via QR code")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Access channel via QR code")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "qr-code")]
        public async System.Threading.Tasks.Task AccessChannelViaQRCode()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "qr-code"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Access channel via QR code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 22
    await testRunner.GivenAsync("a broadcaster has shared a QR code for channel \"Shared-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
    await testRunner.WhenAsync("I scan the QR code", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.ThenAsync("I should be redirected to the listen page for \"Shared-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
    await testRunner.AndAsync("I should automatically connect to the audio stream", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Activate audio context for browser compatibility")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Activate audio context for browser compatibility")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "audio-activation")]
        public async System.Threading.Tasks.Task ActivateAudioContextForBrowserCompatibility()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "audio-activation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Activate audio context for browser compatibility", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 29
    await testRunner.GivenAsync("I am on the listen page for channel \"Test-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
    await testRunner.AndAsync("the browser requires user interaction for audio", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.WhenAsync("I see the \"Tap here if you don\'t hear anything\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.AndAsync("I click the audio activation button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.ThenAsync("the audio context should be activated", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 34
    await testRunner.AndAsync("I should see \"Audio ready!\" confirmation", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.AndAsync("the activation button should be hidden", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Share listening URL with others")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Share listening URL with others")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "channel-sharing")]
        public async System.Threading.Tasks.Task ShareListeningURLWithOthers()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "channel-sharing"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Share listening URL with others", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 39
    await testRunner.GivenAsync("I am listening to channel \"Popular-Stream\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 40
    await testRunner.WhenAsync("I view the listener URL field", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
    await testRunner.ThenAsync("I should see the full URL for the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
    await testRunner.AndAsync("I should be able to copy the URL to clipboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.WhenAsync("I share the URL with another user", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
    await testRunner.ThenAsync("they should be able to access the same audio stream", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle connection errors gracefully")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Handle connection errors gracefully")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "connection-handling")]
        public async System.Threading.Tasks.Task HandleConnectionErrorsGracefully()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "connection-handling"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle connection errors gracefully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 48
    await testRunner.GivenAsync("I try to connect to channel \"Non-Existent-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("the SignalR connection fails", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("I should see an appropriate error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.AndAsync("I should see connection troubleshooting information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Support multiple listeners on the same channel")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Support multiple listeners on the same channel")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "multiple-listeners")]
        public async System.Threading.Tasks.Task SupportMultipleListenersOnTheSameChannel()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "multiple-listeners"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Support multiple listeners on the same channel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 55
    await testRunner.GivenAsync("there is an active broadcaster on channel \"Multi-Listen\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
    await testRunner.WhenAsync("user \"Alice\" connects to channel \"Multi-Listen\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
    await testRunner.AndAsync("user \"Bob\" connects to channel \"Multi-Listen\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
    await testRunner.AndAsync("user \"Charlie\" connects to channel \"Multi-Listen\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
    await testRunner.ThenAsync("all three users should receive the same audio stream", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 60
    await testRunner.AndAsync("the broadcaster should be able to stream to all listeners simultaneously", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Receive and play audio chunks in real-time")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Listening")]
        [Xunit.TraitAttribute("Description", "Receive and play audio chunks in real-time")]
        [Xunit.TraitAttribute("Category", "listening")]
        [Xunit.TraitAttribute("Category", "real-time-audio")]
        public async System.Threading.Tasks.Task ReceiveAndPlayAudioChunksInReal_Time()
        {
            string[] tagsOfScenario = new string[] {
                    "listening",
                    "real-time-audio"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Receive and play audio chunks in real-time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 64
    await testRunner.GivenAsync("I am connected to channel \"Live-Audio\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 65
    await testRunner.AndAsync("there is an active broadcaster streaming audio", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
    await testRunner.WhenAsync("the broadcaster sends audio chunks", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync("I should receive the audio data via SignalR", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 68
    await testRunner.AndAsync("the audio should be played through the browser\'s audio system", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
    await testRunner.AndAsync("the audio should play with minimal latency", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AudioListeningFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AudioListeningFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
