// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HugeVoice.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ChannelPersistenceForListenersFeature : object, Xunit.IClassFixture<ChannelPersistenceForListenersFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Channel Persistence for Listeners", "As a listener  \r\nI want the channel to remain open when the broadcaster leaves\r\nS" +
                "o that I can wait for the broadcaster to return or for a new broadcaster to join" +
                "", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ChannelPersistence.feature"
#line hidden
        
        public ChannelPersistenceForListenersFeature(ChannelPersistenceForListenersFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("the HugeVoice application is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("the SignalR hub is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Channel remains open when broadcaster leaves")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Channel remains open when broadcaster leaves")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "happy-path")]
        public async System.Threading.Tasks.Task ChannelRemainsOpenWhenBroadcasterLeaves()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "happy-path"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Channel remains open when broadcaster leaves", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.GivenAsync("I am listening to channel \"Persistent-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.AndAsync("there is an active broadcaster streaming audio", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.WhenAsync("the broadcaster stops broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
    await testRunner.ThenAsync("I should remain connected to the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 17
    await testRunner.AndAsync("I should see \"Waiting for broadcaster...\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I should receive a \"WaitingForBroadcaster\" notification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("the channel should remain available for new broadcasters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Original broadcaster returns to the same channel")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Original broadcaster returns to the same channel")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "broadcaster-returns")]
        public async System.Threading.Tasks.Task OriginalBroadcasterReturnsToTheSameChannel()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "broadcaster-returns"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Original broadcaster returns to the same channel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 23
    await testRunner.GivenAsync("I am listening to channel \"Return-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.AndAsync("the broadcaster has left but I remained connected", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.AndAsync("I am seeing \"Waiting for broadcaster...\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.WhenAsync("the original broadcaster reconnects and starts broadcasting again", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
    await testRunner.ThenAsync("I should see \"Live Audio\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
    await testRunner.AndAsync("I should start receiving audio chunks immediately", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync("I should receive \"BroadcasterAvailable\" notification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="New broadcaster joins channel after original leaves")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "New broadcaster joins channel after original leaves")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "new-broadcaster")]
        public async System.Threading.Tasks.Task NewBroadcasterJoinsChannelAfterOriginalLeaves()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "new-broadcaster"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("New broadcaster joins channel after original leaves", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 33
    await testRunner.GivenAsync("I am listening to channel \"Handover-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
    await testRunner.AndAsync("the original broadcaster \"Alice\" has left", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.AndAsync("I am waiting for a broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.WhenAsync("a new broadcaster \"Bob\" joins the same channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.AndAsync("\"Bob\" starts broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.ThenAsync("I should see \"Live Audio\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
    await testRunner.AndAsync("I should start receiving audio from \"Bob\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
    await testRunner.AndAsync("I should receive \"BroadcasterJoined\" notification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiple listeners wait together when broadcaster leaves")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Multiple listeners wait together when broadcaster leaves")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "multiple-listeners")]
        public async System.Threading.Tasks.Task MultipleListenersWaitTogetherWhenBroadcasterLeaves()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "multiple-listeners"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Multiple listeners wait together when broadcaster leaves", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 44
    await testRunner.GivenAsync("users \"Alice\", \"Bob\", and \"Charlie\" are listening to channel \"Multi-Wait\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
    await testRunner.AndAsync("there is an active broadcaster streaming audio", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
    await testRunner.WhenAsync("the broadcaster leaves the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
    await testRunner.ThenAsync("all three listeners should remain connected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 48
    await testRunner.AndAsync("all should see \"Waiting for broadcaster...\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("all should receive \"WaitingForBroadcaster\" notifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
    await testRunner.WhenAsync("a new broadcaster joins and starts streaming", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
    await testRunner.ThenAsync("all three listeners should receive the audio stream", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 52
    await testRunner.AndAsync("all should see \"Live Audio\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Listener UI shows appropriate status during waiting")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Listener UI shows appropriate status during waiting")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "listener-experience")]
        public async System.Threading.Tasks.Task ListenerUIShowsAppropriateStatusDuringWaiting()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "listener-experience"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Listener UI shows appropriate status during waiting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 56
    await testRunner.GivenAsync("I am listening to channel \"Status-Test\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 57
    await testRunner.AndAsync("there is an active broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
    await testRunner.WhenAsync("the broadcaster leaves", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 59
    await testRunner.ThenAsync("I should see an hourglass icon instead of broadcast icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 60
    await testRunner.ThenAsync("I should see warning-colored status instead of success-colored", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
    await testRunner.AndAsync("I should see \"Waiting for broadcaster...\" message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
    await testRunner.AndAsync("I should see encouraging text \"Channel is open, but no one is broadcasting yet. S" +
                        "tay connected!\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
    await testRunner.AndAsync("the audio activation button should be hidden while waiting", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Maintain SignalR connection throughout broadcaster changes")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Maintain SignalR connection throughout broadcaster changes")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "continuous-connection")]
        public async System.Threading.Tasks.Task MaintainSignalRConnectionThroughoutBroadcasterChanges()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "continuous-connection"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Maintain SignalR connection throughout broadcaster changes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 67
    await testRunner.GivenAsync("I am connected to channel \"Connection-Test\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
    await testRunner.WhenAsync("the broadcaster leaves and returns multiple times", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
    await testRunner.ThenAsync("my SignalR connection should remain stable", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 70
    await testRunner.AndAsync("I should not need to reconnect manually", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.AndAsync("I should receive all status change notifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
    await testRunner.AndAsync("the room membership should persist throughout", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Shared URLs continue to work when broadcaster is absent")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Shared URLs continue to work when broadcaster is absent")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "qr-code-sharing")]
        public async System.Threading.Tasks.Task SharedURLsContinueToWorkWhenBroadcasterIsAbsent()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "qr-code-sharing"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Shared URLs continue to work when broadcaster is absent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 76
    await testRunner.GivenAsync("a broadcaster shared the QR code for channel \"Shared-Wait\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 77
    await testRunner.AndAsync("the broadcaster has now left the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
    await testRunner.WhenAsync("a new user scans the QR code", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 79
    await testRunner.ThenAsync("they should successfully connect to the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 80
    await testRunner.AndAsync("they should see \"Waiting for broadcaster...\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
    await testRunner.AndAsync("they should be ready to receive audio when broadcasting resumes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle temporary connection issues during waiting")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Handle temporary connection issues during waiting")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "error-recovery")]
        public async System.Threading.Tasks.Task HandleTemporaryConnectionIssuesDuringWaiting()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "error-recovery"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle temporary connection issues during waiting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 85
    await testRunner.GivenAsync("I am waiting for a broadcaster on channel \"Recovery-Test\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 86
    await testRunner.WhenAsync("my internet connection is temporarily interrupted", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
    await testRunner.AndAsync("the connection is restored", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
    await testRunner.ThenAsync("I should automatically reconnect to the same channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 89
    await testRunner.AndAsync("I should resume waiting for a broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 90
    await testRunner.AndAsync("I should receive updated status when a broadcaster joins", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Clean up empty channels appropriately")]
        [Xunit.TraitAttribute("FeatureTitle", "Channel Persistence for Listeners")]
        [Xunit.TraitAttribute("Description", "Clean up empty channels appropriately")]
        [Xunit.TraitAttribute("Category", "channel-persistence")]
        [Xunit.TraitAttribute("Category", "cleanup")]
        public async System.Threading.Tasks.Task CleanUpEmptyChannelsAppropriately()
        {
            string[] tagsOfScenario = new string[] {
                    "channel-persistence",
                    "cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Clean up empty channels appropriately", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 94
    await testRunner.GivenAsync("channel \"Empty-Channel\" has no active broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 95
    await testRunner.AndAsync("all listeners have disconnected from the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
    await testRunner.WhenAsync("the system performs cleanup", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 97
    await testRunner.ThenAsync("the channel entry should be removed from server memory", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 98
    await testRunner.ButAsync("when new users join the channel later", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 99
    await testRunner.ThenAsync("they should be able to create and use the channel normally", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ChannelPersistenceForListenersFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ChannelPersistenceForListenersFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
