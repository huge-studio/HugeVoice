// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HugeVoice.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AudioTechnologyIntegrationFeature : object, Xunit.IClassFixture<AudioTechnologyIntegrationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Audio Technology Integration", "As a user\r\nI want reliable audio capture and playback\r\nSo that I can broadcast an" +
                "d listen to high-quality audio streams", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AudioTechnology.feature"
#line hidden
        
        public AudioTechnologyIntegrationFeature(AudioTechnologyIntegrationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("the HugeVoice application is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("the browser supports Web Audio APIs", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Request and handle microphone permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Request and handle microphone permissions")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "microphone")]
        public async System.Threading.Tasks.Task RequestAndHandleMicrophonePermissions()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "microphone"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Request and handle microphone permissions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.GivenAsync("I am on the broadcast page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.WhenAsync("I start broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("the browser should request microphone permission", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
    await testRunner.WhenAsync("I grant microphone permission", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.ThenAsync("the system should access the microphone successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 18
    await testRunner.WhenAsync("I deny microphone permission", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("I should see appropriate error guidance", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Capture audio from microphone")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Capture audio from microphone")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "capture")]
        public async System.Threading.Tasks.Task CaptureAudioFromMicrophone()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "capture"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Capture audio from microphone", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 23
    await testRunner.GivenAsync("I have granted microphone permission", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.AndAsync("I am broadcasting on a channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.WhenAsync("I speak into the microphone", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("the audio should be captured in real-time", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
    await testRunner.AndAsync("the audio should be processed into chunks", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("the chunks should be encoded for transmission", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Stream audio via SignalR")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Stream audio via SignalR")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "streaming")]
        public async System.Threading.Tasks.Task StreamAudioViaSignalR()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "streaming"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Stream audio via SignalR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.GivenAsync("I am actively broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
    await testRunner.WhenAsync("audio chunks are captured", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("they should be sent via SignalR to the server", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.AndAsync("the server should broadcast them to all listeners in the room", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.AndAsync("the transmission should maintain audio quality", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Play received audio on listener side")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Play received audio on listener side")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "playback")]
        public async System.Threading.Tasks.Task PlayReceivedAudioOnListenerSide()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "playback"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Play received audio on listener side", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 40
    await testRunner.GivenAsync("I am listening to a channel with active broadcast", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
    await testRunner.WhenAsync("I receive audio chunks via SignalR", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.ThenAsync("the audio should be decoded from base64", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
    await testRunner.AndAsync("the audio should be played through the browser\'s audio system", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.AndAsync("the playback should be smooth and continuous", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle browser audio context restrictions")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Handle browser audio context restrictions")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "browser-compatibility")]
        public async System.Threading.Tasks.Task HandleBrowserAudioContextRestrictions()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "browser-compatibility"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle browser audio context restrictions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 48
    await testRunner.GivenAsync("I am on a browser that requires user interaction for audio", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("I first load the listen page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("I should see an audio activation button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.WhenAsync("I click the activation button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
    await testRunner.ThenAsync("the audio context should be activated", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
    await testRunner.AndAsync("subsequent audio should play automatically", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Maintain audio quality during transmission")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Maintain audio quality during transmission")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "quality")]
        public async System.Threading.Tasks.Task MaintainAudioQualityDuringTransmission()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "quality"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Maintain audio quality during transmission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 57
    await testRunner.GivenAsync("I am broadcasting high-quality audio", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 58
    await testRunner.WhenAsync("the audio is captured, transmitted, and played", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 59
    await testRunner.ThenAsync("the quality should be preserved as much as possible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 60
    await testRunner.AndAsync("latency should be minimized for real-time experience", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
    await testRunner.AndAsync("there should be no significant audio artifacts", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle audio system errors gracefully")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Handle audio system errors gracefully")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "error-recovery")]
        public async System.Threading.Tasks.Task HandleAudioSystemErrorsGracefully()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "error-recovery"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle audio system errors gracefully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 65
    await testRunner.GivenAsync("I am using the audio system", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
    await testRunner.WhenAsync("the microphone becomes unavailable during broadcast", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync("I should receive an appropriate error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 68
    await testRunner.AndAsync("broadcasting should stop gracefully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
    await testRunner.WhenAsync("audio playback fails on the listener side", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
    await testRunner.ThenAsync("the error should be logged and handled without crashing", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Support concurrent audio streams")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Support concurrent audio streams")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "multiple-streams")]
        public async System.Threading.Tasks.Task SupportConcurrentAudioStreams()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "multiple-streams"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Support concurrent audio streams", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 74
    await testRunner.GivenAsync("there are multiple active channels", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 75
    await testRunner.WhenAsync("different broadcasters are streaming on different channels", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
    await testRunner.ThenAsync("each stream should be isolated", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 77
    await testRunner.AndAsync("listeners should only receive audio from their joined channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
    await testRunner.AndAsync("there should be no cross-channel audio leakage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Clean up audio resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Technology Integration")]
        [Xunit.TraitAttribute("Description", "Clean up audio resources")]
        [Xunit.TraitAttribute("Category", "audio")]
        [Xunit.TraitAttribute("Category", "cleanup")]
        public async System.Threading.Tasks.Task CleanUpAudioResources()
        {
            string[] tagsOfScenario = new string[] {
                    "audio",
                    "cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Clean up audio resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 82
    await testRunner.GivenAsync("I am using audio resources", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 83
    await testRunner.WhenAsync("I stop broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
    await testRunner.ThenAsync("microphone access should be released", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 85
    await testRunner.AndAsync("audio processing should stop", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
    await testRunner.WhenAsync("I leave a listening session", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
    await testRunner.ThenAsync("audio playback resources should be cleaned up", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 88
    await testRunner.AndAsync("no background audio processing should continue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AudioTechnologyIntegrationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AudioTechnologyIntegrationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
