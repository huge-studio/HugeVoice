// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HugeVoice.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AudioBroadcastingFeature : object, Xunit.IClassFixture<AudioBroadcastingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Audio Broadcasting", "As a user\r\nI want to broadcast audio to a named channel\r\nSo that others can liste" +
                "n to my audio stream in real-time", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Calculator.feature"
#line hidden
        
        public AudioBroadcastingFeature(AudioBroadcastingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("the HugeVoice application is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("the SignalR hub is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create and start broadcasting on a new channel")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Broadcasting")]
        [Xunit.TraitAttribute("Description", "Create and start broadcasting on a new channel")]
        [Xunit.TraitAttribute("Category", "broadcasting")]
        [Xunit.TraitAttribute("Category", "happy-path")]
        public async System.Threading.Tasks.Task CreateAndStartBroadcastingOnANewChannel()
        {
            string[] tagsOfScenario = new string[] {
                    "broadcasting",
                    "happy-path"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create and start broadcasting on a new channel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.GivenAsync("I am on the broadcast page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.WhenAsync("I generate a random channel ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
    await testRunner.AndAsync("I connect to the hub", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("I request broadcaster role for the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.ThenAsync("I should become the active broadcaster for the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 18
    await testRunner.AndAsync("I should see \"Channel Available: Ready to broadcast\" message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("I should be able to start broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent multiple broadcasters on the same channel")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Broadcasting")]
        [Xunit.TraitAttribute("Description", "Prevent multiple broadcasters on the same channel")]
        [Xunit.TraitAttribute("Category", "broadcasting")]
        [Xunit.TraitAttribute("Category", "single-broadcaster")]
        public async System.Threading.Tasks.Task PreventMultipleBroadcastersOnTheSameChannel()
        {
            string[] tagsOfScenario = new string[] {
                    "broadcasting",
                    "single-broadcaster"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Prevent multiple broadcasters on the same channel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 23
    await testRunner.GivenAsync("user \"Alice\" is already broadcasting on channel \"Happy-Panda\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.WhenAsync("user \"Bob\" tries to connect to channel \"Happy-Panda\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
    await testRunner.AndAsync("user \"Bob\" requests broadcaster role for \"Happy-Panda\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.ThenAsync("user \"Bob\" should be denied broadcaster role", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
    await testRunner.AndAsync("user \"Bob\" should see \"Channel Occupied: Another broadcaster is already active\" m" +
                        "essage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("user \"Bob\" should not be able to start broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate and use custom channel names")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Broadcasting")]
        [Xunit.TraitAttribute("Description", "Generate and use custom channel names")]
        [Xunit.TraitAttribute("Category", "broadcasting")]
        [Xunit.TraitAttribute("Category", "channel-management")]
        public async System.Threading.Tasks.Task GenerateAndUseCustomChannelNames()
        {
            string[] tagsOfScenario = new string[] {
                    "broadcasting",
                    "channel-management"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Generate and use custom channel names", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.GivenAsync("I am on the broadcast page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
    await testRunner.WhenAsync("I generate a new channel ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("I should see a fun animal-based channel name like \"Brave-Bear\" or \"Silly-Monkey\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.WhenAsync("I enter a custom channel ID \"MyCustomChannel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
    await testRunner.ThenAsync("the channel ID should be updated to \"MyCustomChannel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 37
    await testRunner.AndAsync("the QR code should be updated with the new channel URL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle SignalR connection states")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Broadcasting")]
        [Xunit.TraitAttribute("Description", "Handle SignalR connection states")]
        [Xunit.TraitAttribute("Category", "broadcasting")]
        [Xunit.TraitAttribute("Category", "connectivity")]
        public async System.Threading.Tasks.Task HandleSignalRConnectionStates()
        {
            string[] tagsOfScenario = new string[] {
                    "broadcasting",
                    "connectivity"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle SignalR connection states", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 41
    await testRunner.GivenAsync("I am on the broadcast page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
    await testRunner.WhenAsync("the SignalR hub is not connected", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
    await testRunner.ThenAsync("I should see \"Connection Status: Not Connected\" warning", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
    await testRunner.AndAsync("I should see a \"Create Channel\" button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.WhenAsync("I click \"Create Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
    await testRunner.ThenAsync("the system should connect to the SignalR hub", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("I should join the specified room", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("the connection status should show as connected", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Release broadcaster role when stopping")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Broadcasting")]
        [Xunit.TraitAttribute("Description", "Release broadcaster role when stopping")]
        [Xunit.TraitAttribute("Category", "broadcasting")]
        [Xunit.TraitAttribute("Category", "cleanup")]
        public async System.Threading.Tasks.Task ReleaseBroadcasterRoleWhenStopping()
        {
            string[] tagsOfScenario = new string[] {
                    "broadcasting",
                    "cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Release broadcaster role when stopping", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 52
    await testRunner.GivenAsync("I am broadcasting on channel \"Test-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.WhenAsync("I stop broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("I should release the broadcaster role for \"Test-Channel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
    await testRunner.AndAsync("other users should be notified that the broadcaster stopped", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
    await testRunner.AndAsync("the channel should become available for new broadcasters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle broadcaster disconnection")]
        [Xunit.TraitAttribute("FeatureTitle", "Audio Broadcasting")]
        [Xunit.TraitAttribute("Description", "Handle broadcaster disconnection")]
        [Xunit.TraitAttribute("Category", "broadcasting")]
        [Xunit.TraitAttribute("Category", "disconnection")]
        public async System.Threading.Tasks.Task HandleBroadcasterDisconnection()
        {
            string[] tagsOfScenario = new string[] {
                    "broadcasting",
                    "disconnection"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle broadcaster disconnection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 60
    await testRunner.GivenAsync("user \"Alice\" is broadcasting on channel \"Lost-Connection\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 61
    await testRunner.WhenAsync("user \"Alice\" disconnects unexpectedly", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
    await testRunner.ThenAsync("the broadcaster role for \"Lost-Connection\" should be automatically released", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
    await testRunner.AndAsync("all listeners should be notified that the broadcaster disconnected", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
    await testRunner.AndAsync("the channel should become available for new broadcasters", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AudioBroadcastingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AudioBroadcastingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
