// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HugeVoice.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserInterfaceAndNavigationFeature : object, Xunit.IClassFixture<UserInterfaceAndNavigationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "User Interface and Navigation", "As a user\r\nI want an intuitive and responsive user interface\r\nSo that I can easil" +
                "y navigate and use the HugeVoice application", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UserInterface.feature"
#line hidden
        
        public UserInterfaceAndNavigationFeature(UserInterfaceAndNavigationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("the HugeVoice application is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Navigate between main pages")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Navigate between main pages")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "navigation")]
        public async System.Threading.Tasks.Task NavigateBetweenMainPages()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "navigation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Navigate between main pages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 12
    await testRunner.GivenAsync("I am on the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
    await testRunner.WhenAsync("I view the main navigation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
    await testRunner.ThenAsync("I should see options for \"Start Broadcasting\" and \"Listen to Broadcast\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
    await testRunner.WhenAsync("I click \"Start Broadcasting\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
    await testRunner.ThenAsync("I should be taken to the broadcast page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 17
    await testRunner.WhenAsync("I click \"Listen to Broadcast\" or access a listen URL", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
    await testRunner.ThenAsync("I should be taken to the listen page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Responsive design across devices")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Responsive design across devices")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "responsive")]
        public async System.Threading.Tasks.Task ResponsiveDesignAcrossDevices()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "responsive"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Responsive design across devices", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 22
    await testRunner.GivenAsync("I am using the application on different screen sizes", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
    await testRunner.WhenAsync("I view the page on desktop", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.ThenAsync("the layout should be optimized for large screens with side-by-side content", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
    await testRunner.WhenAsync("I view the page on mobile", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("the layout should stack vertically for better mobile experience", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
    await testRunner.AndAsync("all buttons and controls should remain accessible", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Broadcasting page user interface")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Broadcasting page user interface")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "broadcasting-interface")]
        public async System.Threading.Tasks.Task BroadcastingPageUserInterface()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "broadcasting-interface"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Broadcasting page user interface", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 31
    await testRunner.GivenAsync("I am on the broadcast page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
    await testRunner.ThenAsync("I should see a QR code generation area", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
    await testRunner.AndAsync("I should see channel setup controls", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
    await testRunner.AndAsync("I should see a channel ID input field with generate button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.AndAsync("I should see copy buttons for sharing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.AndAsync("I should see connection status indicators", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.AndAsync("I should see broadcasting control buttons", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Listening page user interface")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Listening page user interface")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "listening-interface")]
        public async System.Threading.Tasks.Task ListeningPageUserInterface()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "listening-interface"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Listening page user interface", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 41
    await testRunner.GivenAsync("I am on the listen page for a channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
    await testRunner.ThenAsync("I should see the channel connection status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
    await testRunner.AndAsync("I should see a QR code for sharing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.AndAsync("I should see the room ID and listener URL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.AndAsync("I should see audio status indicators", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
    await testRunner.AndAsync("I should see an audio activation button if needed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Visual feedback for user actions")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Visual feedback for user actions")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "visual-feedback")]
        public async System.Threading.Tasks.Task VisualFeedbackForUserActions()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "visual-feedback"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Visual feedback for user actions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 50
    await testRunner.GivenAsync("I am using the application", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
    await testRunner.WhenAsync("I am connecting to a channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
    await testRunner.ThenAsync("I should see loading spinners and progress indicators", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
    await testRunner.WhenAsync("I successfully connect", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("I should see success messages with green styling", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
    await testRunner.WhenAsync("an error occurs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
    await testRunner.ThenAsync("I should see error messages with red styling and warning icons", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
    await testRunner.WhenAsync("I am broadcasting", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
    await testRunner.ThenAsync("I should see live indicators with animated elements", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Accessibility features")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Accessibility features")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "accessibility")]
        public async System.Threading.Tasks.Task AccessibilityFeatures()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "accessibility"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Accessibility features", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 62
    await testRunner.GivenAsync("I am using the application with accessibility needs", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
    await testRunner.WhenAsync("I navigate using keyboard only", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 64
    await testRunner.ThenAsync("all interactive elements should be accessible via keyboard", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 65
    await testRunner.WhenAsync("I use a screen reader", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
    await testRunner.ThenAsync("appropriate ARIA labels and descriptions should be available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
    await testRunner.AndAsync("status changes should be announced", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Home page information and guidance")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "Home page information and guidance")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "home-page")]
        public async System.Threading.Tasks.Task HomePageInformationAndGuidance()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "home-page"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Home page information and guidance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 71
    await testRunner.GivenAsync("I am on the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
    await testRunner.ThenAsync("I should see the HugeVoice branding and logo", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
    await testRunner.AndAsync("I should see a clear explanation of how the app works", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
    await testRunner.AndAsync("I should see the three-step process: \"Create a channel\", \"Share your channel\", \"S" +
                        "tart broadcasting\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
    await testRunner.AndAsync("I should see attractive cards for \"Start Broadcasting\" and \"Listen to Broadcast\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
    await testRunner.AndAsync("I should see helpful information about QR codes and channel names", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User-friendly error messages")]
        [Xunit.TraitAttribute("FeatureTitle", "User Interface and Navigation")]
        [Xunit.TraitAttribute("Description", "User-friendly error messages")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "error-handling")]
        public async System.Threading.Tasks.Task User_FriendlyErrorMessages()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "error-handling"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User-friendly error messages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 80
    await testRunner.GivenAsync("I encounter various error conditions", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 81
    await testRunner.WhenAsync("a connection fails", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 82
    await testRunner.ThenAsync("I should see \"Failed to connect to audio hub\" with details", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 83
    await testRunner.WhenAsync("microphone access is denied", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
    await testRunner.ThenAsync("I should see appropriate browser permission guidance", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 85
    await testRunner.WhenAsync("a channel is occupied", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
    await testRunner.ThenAsync("I should see \"Channel Occupied: Another broadcaster is already active\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 87
    await testRunner.AndAsync("I should be provided with actionable next steps", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await UserInterfaceAndNavigationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await UserInterfaceAndNavigationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
