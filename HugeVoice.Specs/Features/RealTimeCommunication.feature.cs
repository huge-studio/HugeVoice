// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HugeVoice.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Real_TimeCommunicationFeature : object, Xunit.IClassFixture<Real_TimeCommunicationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Real-time Communication", "As a user\r\nI want reliable real-time communication\r\nSo that audio streaming works" +
                " seamlessly across all connected clients", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RealTimeCommunication.feature"
#line hidden
        
        public Real_TimeCommunicationFeature(Real_TimeCommunicationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
#line 8
    await testRunner.GivenAsync("the HugeVoice application is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("the SignalR hub is operational", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Establish SignalR connection")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Establish SignalR connection")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "connection")]
        public async System.Threading.Tasks.Task EstablishSignalRConnection()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "connection"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Establish SignalR connection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.GivenAsync("I am accessing the application", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.WhenAsync("I navigate to broadcast or listen pages", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
    await testRunner.ThenAsync("a SignalR connection should be established to the audio hub", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("the connection should be maintained during the session", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("connection status should be displayed to the user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Join and manage SignalR rooms")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Join and manage SignalR rooms")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "rooms")]
        public async System.Threading.Tasks.Task JoinAndManageSignalRRooms()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "rooms"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Join and manage SignalR rooms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 21
    await testRunner.GivenAsync("I am connected to the SignalR hub", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
    await testRunner.WhenAsync("I specify a channel ID \"Test-Room\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
    await testRunner.ThenAsync("I should join the SignalR group for \"Test-Room\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
    await testRunner.AndAsync("I should be able to send and receive messages within that group", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.WhenAsync("I change to a different channel \"New-Room\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("I should leave \"Test-Room\" and join \"New-Room\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle broadcasting-related SignalR messages")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Handle broadcasting-related SignalR messages")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "broadcasting-messages")]
        public async System.Threading.Tasks.Task HandleBroadcasting_RelatedSignalRMessages()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "broadcasting-messages"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle broadcasting-related SignalR messages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 30
    await testRunner.GivenAsync("I am connected as a potential broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
    await testRunner.WhenAsync("I request broadcaster role for a channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync("I should receive a boolean response indicating success or failure", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
    await testRunner.WhenAsync("another user becomes a broadcaster in my channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
    await testRunner.ThenAsync("I should receive a \"BroadcasterChanged\" notification", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
    await testRunner.WhenAsync("there are broadcast errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
    await testRunner.ThenAsync("I should receive \"BroadcastError\" messages with details", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transmit audio data via SignalR")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Transmit audio data via SignalR")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "audio-transmission")]
        public async System.Threading.Tasks.Task TransmitAudioDataViaSignalR()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "audio-transmission"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Transmit audio data via SignalR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 40
    await testRunner.GivenAsync("I am an active broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
    await testRunner.WhenAsync("I send audio chunks to the server", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.ThenAsync("the server should validate my broadcaster status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
    await testRunner.AndAsync("the server should broadcast the audio to all other clients in the room", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.AndAsync("unauthorized transmission attempts should be rejected", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Receive real-time status updates as a listener")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Receive real-time status updates as a listener")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "listener-notifications")]
        public async System.Threading.Tasks.Task ReceiveReal_TimeStatusUpdatesAsAListener()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "listener-notifications"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Receive real-time status updates as a listener", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 48
    await testRunner.GivenAsync("I am listening to a channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("a broadcaster joins the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("I should receive \"BroadcasterChanged\" notification with active status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.WhenAsync("a broadcaster leaves the channel", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
    await testRunner.ThenAsync("I should receive \"BroadcasterChanged\" notification with inactive status", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
    await testRunner.WhenAsync("I join a room with an existing broadcaster", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
    await testRunner.ThenAsync("I should receive \"RoomStatus\" information about the current state", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle connection interruptions")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Handle connection interruptions")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "connection-recovery")]
        public async System.Threading.Tasks.Task HandleConnectionInterruptions()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "connection-recovery"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle connection interruptions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 58
    await testRunner.GivenAsync("I have an active SignalR connection", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
    await testRunner.WhenAsync("the connection is temporarily lost", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
    await testRunner.ThenAsync("the SignalR client should attempt to reconnect automatically", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
    await testRunner.AndAsync("I should see appropriate connection status updates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
    await testRunner.WhenAsync("the connection is restored", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
    await testRunner.ThenAsync("I should rejoin my previous room automatically", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Support multiple concurrent channels")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Support multiple concurrent channels")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "scalability")]
        public async System.Threading.Tasks.Task SupportMultipleConcurrentChannels()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "scalability"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Support multiple concurrent channels", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 67
    await testRunner.GivenAsync("there are multiple active channels simultaneously", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
    await testRunner.WhenAsync("users are broadcasting and listening across different channels", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
    await testRunner.ThenAsync("each channel should operate independently", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 70
    await testRunner.AndAsync("messages should only be delivered to clients in the same room", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.AndAsync("the server should handle multiple concurrent connections efficiently", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Clean up connections and resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Clean up connections and resources")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "cleanup")]
        public async System.Threading.Tasks.Task CleanUpConnectionsAndResources()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "cleanup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Clean up connections and resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 75
    await testRunner.GivenAsync("I have active SignalR connections and room memberships", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 76
    await testRunner.WhenAsync("I close the browser or navigate away", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
    await testRunner.ThenAsync("my connection should be properly cleaned up", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 78
    await testRunner.AndAsync("I should be removed from any SignalR groups", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
    await testRunner.AndAsync("my broadcaster role should be released if applicable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
    await testRunner.AndAsync("other clients should be notified of my disconnection", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle SignalR communication errors")]
        [Xunit.TraitAttribute("FeatureTitle", "Real-time Communication")]
        [Xunit.TraitAttribute("Description", "Handle SignalR communication errors")]
        [Xunit.TraitAttribute("Category", "signalr")]
        [Xunit.TraitAttribute("Category", "error-handling")]
        public async System.Threading.Tasks.Task HandleSignalRCommunicationErrors()
        {
            string[] tagsOfScenario = new string[] {
                    "signalr",
                    "error-handling"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Handle SignalR communication errors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 84
    await testRunner.GivenAsync("I am using SignalR communication", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 85
    await testRunner.WhenAsync("the server is unavailable", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
    await testRunner.ThenAsync("I should see appropriate connection error messages", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 87
    await testRunner.WhenAsync("message transmission fails", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
    await testRunner.ThenAsync("errors should be logged and handled gracefully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 89
    await testRunner.WhenAsync("the hub method calls fail", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 90
    await testRunner.ThenAsync("I should receive meaningful error feedback", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await Real_TimeCommunicationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await Real_TimeCommunicationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
